generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model user_role {
  id       Int     @id @default(autoincrement())
  roleName String

  // One-to-many relationship: a role can have many users
  users    user[]
}

model user {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  firstName    String?
  lastName     String?
  phone        String?
  password     String

  // Reference to a single role
  roleId       Int
  role         user_role @relation(fields: [roleId], references: [id])
  createdProjects   project[] @relation("CreatedProjects")

  createdTickets   ticket[] @relation("CreatedTickets")

  projects project_team[]
    // Projects the user is managing as a technical manager
  techManagedProjects project[]         @relation("TechnicalManagerProjects")
  managedProjects project_manager[]
  // Tickets
  assignedTickets    user_ticket[]
  comments comment[]
  equipments equipment[]
  clientProjects           project[] @relation("ClientProjects")

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model project {
  id Int @id @default(autoincrement())
  name String 
  description String? 
  projectType ProjectType
  createdById Int?
  createdBy user?  @relation("CreatedProjects", fields: [createdById], references: [id]) 
  clientId Int?
  client user? @relation("ClientProjects", fields: [clientId], references: [id])

  // Technical manager for the project (optional)
  technicalManagerId Int?
  technicalManager  user?            @relation("TechnicalManagerProjects", fields: [technicalManagerId], references: [id])

  // Set cascading delete for related models
  teamMembers    project_team[]  
  managers       project_manager[]
  tickets        ticket[]  


  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

enum ProjectType {
  INTERNAL
  EXTERNAL
}
model project_team{
  teamMemberId Int
  projectId Int
  teamMember user @relation(fields: [teamMemberId], references: [id])
  project        project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@id([teamMemberId, projectId])
}
model project_manager{
  managerId Int
  projectId Int
  manager user @relation(fields: [managerId], references: [id])
  project  project         @relation(fields: [projectId], references: [id], onDelete: Cascade)  
  @@id([managerId, projectId])
}
model ticket {
  id Int @id @default(autoincrement())
  title String
  description String?

  type ticketType?
  status ticket_status @relation(fields: [statusId], references: [id])
  statusId Int
  priority ticketPriority
  createdById Int?
  createdBy user?  @relation("CreatedTickets", fields: [createdById], references: [id]) 
  //assigned users
  assignedUsers user_ticket[]
  projectId Int
  project  project  @relation(fields: [projectId], references: [id], onDelete: Cascade)                     
  comments comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model user_ticket {
  userId   Int
  ticketId Int

  user     user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket   ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@id([userId, ticketId]) 
}
enum ticketType {
  BUG
  FEATURE
  CONSULTATION
  REQUEST
}
model ticket_status{
  id Int @id @default(autoincrement())
  statusName String
  tickets ticket[]
}

enum ticketPriority {
  LOW         
  MEDIUM      
  HIGH        
  CRITICAL    
}
model comment {
  id Int @id @default(autoincrement())
  text String
  attachedFiles String[]

  ticketId Int
  ticket ticket @relation(fields: [ticketId], references: [id])
  createdByUserId Int

  createdby user @relation(fields: [createdByUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model equipment{
  id Int @id @default(autoincrement())
  name String
  serialNumber     String             @unique
  purchaseDate DateTime?
  warrantyEndDate DateTime?
  purchaseCost Float?
  purchaseCompany String?
  brand String?

    // Relationships
  category          equipmentCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId        Int?

  condition  EquipmentCondition @default(OPERATIONAL)

  assignedTo user? @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([serialNumber], name: "idx_serialNumber")
}

model equipmentCategory{
  id Int @id @default(autoincrement())
  categoryName     String             @unique
  equipments equipment[]
}

enum EquipmentCondition {
  OPERATIONAL
  DAMAGED
  UNDER_MAINTENANCE
  REPAIRED
}